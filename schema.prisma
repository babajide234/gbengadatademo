
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String          @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
  member        Members? // ono-to-one relationship with member
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Members {
  id                   String        @id @default(cuid())
  userId               String        @unique
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                String?       // e.g., "Mr.", "Ms.", "Mrs.", etc.
  surname              String        // Surname (Last Name)
  firstName            String        // First Name
  otherNames           String?       // Other Names
  gender               Gender        // Gender (M/F)
  phoneNumber          String        // Phone Number
  emailAddress         String?       // Email Address
  address              String?       // Street Address
  state                String        // State
  lga                  String        // Local Government Area (LGA)
  ward                 String        // Ward
  wardCode             String        // Ward Code
  pollingUnitCode      String        // Polling Unit Code
  inecVotingCardNumber String?       // INEC Voting Card Number
  categories           Category[]    // Category (Many-to-Many relationship)
  createdAt            DateTime      @default(now()) @map(name: "created_at")
  updatedAt            DateTime      @updatedAt @map(name: "updated_at")
}

model Category {
  id          String     @id @default(cuid())
  name        String     // Category Name
  members     Members[]   
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
}

enum Gender {
  M // Male
  F // Female
}
